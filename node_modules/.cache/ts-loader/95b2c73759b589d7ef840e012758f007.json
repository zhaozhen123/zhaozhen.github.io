{"remainingRequest":"/Users/zhaozhen/Desktop/算命/gossip/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!/Users/zhaozhen/Desktop/算命/gossip/node_modules/_ts-loader@6.2.2@ts-loader/index.js??ref--13-2!/Users/zhaozhen/Desktop/算命/gossip/src/assets/js/https.ts","dependencies":[{"path":"/Users/zhaozhen/Desktop/算命/gossip/src/assets/js/https.ts","mtime":1603103821207},{"path":"/Users/zhaozhen/Desktop/算命/gossip/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaozhen/Desktop/算命/gossip/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhaozhen/Desktop/算命/gossip/node_modules/_ts-loader@6.2.2@ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CnZhciBiYXNlVXJsID0gcHJvY2Vzcy5lbnYuVlVFX0FQUF9VUklfRE9NQUlOOwp2YXIgaW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoewogIGJhc2VVUkw6IGJhc2VVcmwsCiAgdGltZW91dDogMTAwMDAsCiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiAoZGF0YSkgewogICAgcmV0dXJuIGRhdGE7CiAgfV0KfSk7IC8vaHR0cCByZXF1ZXN0IOaLpuaIquWZqAoKaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHsKICBjb25maWcudXJsID0gYmFzZVVybCArIGNvbmZpZy51cmw7CiAgY29uZmlnLmhlYWRlcnMgPSB7CiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgfTsKICByZXR1cm4gY29uZmlnOwp9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwp9KTsgLy9odHRwIHJlc3BvbnNlIOaLpuaIquWZqAoKaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICBpZiAocmVzcG9uc2UuZGF0YSA9PSB1bmRlZmluZWQpIHsKICAgIHJlc3BvbnNlID0gcmVzcG9uc2UucmVxdWVzdC5yZXNwb25zZVRleHQ7CiAgfSBlbHNlIHsKICAgIHJlc3BvbnNlID0gcmVzcG9uc2UuZGF0YTsKICB9IC8vIGlmKHJlc3BvbnNlLmRhdGEuZXJyQ29kZSA9PTIpewogIC8vICAgcm91dGVyLnB1c2goewogIC8vICAgICBwYXRoOiIvbG9naW4iLAogIC8vICAgICBxdWVyeTp7cmVkaXJlY3Q6cm91dGVyLmN1cnJlbnRSb3V0ZS5mdWxsUGF0aH0vL+S7juWTquS4qumhtemdoui3s+i9rAogIC8vICAgfSkKICAvLyB9CgoKICByZXR1cm4gcmVzcG9uc2U7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIGlmIChlcnJvciAmJiBlcnJvci5yZXNwb25zZSkgewogICAgLy8g57uf5LiA5oum5oiqCiAgICBzd2l0Y2ggKGVycm9yLnJlc3BvbnNlLnN0YXR1cykgewogICAgICBjYXNlIDQwMDoKICAgICAgICBlcnJvci5tc2cgPSAi6K+35rGC6ZSZ6K+vIjsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgNDAxOgogICAgICAgIGVycm9yLm1zZyA9ICLmnKrnmbvlvZUiOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSA0MDM6CiAgICAgICAgZXJyb3IubXNnID0gIuaLkue7neiuv+mXriI7CiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlIDQwNDoKICAgICAgICBlcnJvci5tc2cgPSAiXHU4QkY3XHU2QzQyXHU1NzMwXHU1NzQwXHU1MUZBXHU5NTE5OiAiLmNvbmNhdChlcnJvci5yZXNwb25zZS5jb25maWcudXJsKTsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgNDA4OgogICAgICAgIGVycm9yLm1zZyA9ICLor7fmsYLotoXml7YiOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSA1MDA6CiAgICAgICAgZXJyb3IubXNnID0gIuacjeWKoeWZqOWGhemDqOmUmeivryI7CiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlIDUwMToKICAgICAgICBlcnJvci5tc2cgPSAi5pyN5Yqh5pyq5a6e546wIjsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgNTAyOgogICAgICAgIGVycm9yLm1zZyA9ICLnvZHlhbPplJnor68iOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSA1MDM6CiAgICAgICAgZXJyb3IubXNnID0gIuacjeWKoeS4jeWPr+eUqCI7CiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlIDUwNDoKICAgICAgICBlcnJvci5tc2cgPSAi572R5YWz6LaF5pe2IjsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgNTA1OgogICAgICAgIGVycm9yLm1zZyA9ICJIVFRQ54mI5pys5LiN5Y+X5pSv5oyBIjsKICAgICAgICBicmVhazsKCiAgICAgIGRlZmF1bHQ6CiAgICB9CiAgfQoKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOyAvLyDov5Tlm57mjqXlj6Pov5Tlm57nmoTplJnor6/kv6Hmga8KfSk7Ci8qKgogKiDlsIHoo4VnZXTmlrnms5UKICogQHBhcmFtIHVybAogKiBAcGFyYW0gZGF0YQogKiBAcmV0dXJucyB7UHJvbWlzZX0KICovCgpleHBvcnQgZnVuY3Rpb24gZmV0Y2godXJsKSB7CiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGluc3RhbmNlLmdldCh1cmwsIHsKICAgICAgcGFyYW1zOiBwYXJhbXMKICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXNwb25zZSkpOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICByZWplY3QoZXJyKTsKICAgIH0pOwogIH0pOwp9Ci8qKgogKiDlsIHoo4Vwb3N06K+35rGCCiAqIEBwYXJhbSB1cmwKICogQHBhcmFtIGRhdGEKICogQHJldHVybnMge1Byb21pc2V9CiAqLwoKZXhwb3J0IGZ1bmN0aW9uIHBvc3QodXJsKSB7CiAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBpbnN0YW5jZS5wb3N0KHVybCwgZGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKHJlc3BvbnNlKSk7CiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgIHJlamVjdChlcnIpOwogICAgfSk7CiAgfSk7Cn0KLyoqCiog5bCB6KOFcGF0Y2jor7fmsYIKKiBAcGFyYW0gdXJsCiogQHBhcmFtIGRhdGEKKiBAcmV0dXJucyB7UHJvbWlzZX0KKi8KCmV4cG9ydCBmdW5jdGlvbiBwYXRjaCh1cmwpIHsKICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGluc3RhbmNlLnBhdGNoKHVybCwgZGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTsKICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgcmVqZWN0KGVycik7CiAgICB9KTsKICB9KTsKfQovKioKKiDlsIHoo4VwdXTor7fmsYIKKiBAcGFyYW0gdXJsCiogQHBhcmFtIGRhdGEKKiBAcmV0dXJucyB7UHJvbWlzZX0KKi8KCmV4cG9ydCBmdW5jdGlvbiBwdXQodXJsKSB7CiAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBpbnN0YW5jZS5wdXQodXJsLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICByZXNvbHZlKHJlc3BvbnNlLmRhdGEpOwogICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICByZWplY3QoZXJyKTsKICAgIH0pOwogIH0pOwp9"},{"version":3,"sources":["/Users/zhaozhen/Desktop/算命/gossip/src/assets/js/https.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport qs from 'qs'\nimport { Toast } from 'vant';\nlet baseUrl: string = process.env.VUE_APP_URI_DOMAIN\nconst instance = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000, // 请求超时时间\n    transformResponse: [data => data],\n});\n//http request 拦截器\ninstance.interceptors.request.use(\n  (config:any) => {\n    config.url = baseUrl + config.url\n    config.headers = {\n      'Content-Type':'application/json',\n    }\n    return config;\n  },\n  (error:any) => {\n    return Promise.reject(error);\n  }\n);\n//http response 拦截器\ninstance.interceptors.response.use(\n    response => {\n        if (response.data == undefined) {\n            response = response.request.responseText;\n        } else {\n            response = response.data;\n        }\n        // if(response.data.errCode ==2){\n        //   router.push({\n        //     path:\"/login\",\n        //     query:{redirect:router.currentRoute.fullPath}//从哪个页面跳转\n        //   })\n        // }\n        return response;\n      },\n      error => {\n        if (error && error.response) { // 统一拦截\n            switch (error.response.status) {\n                case 400:\n                    error.msg = \"请求错误\";\n                    break;\n\n                case 401:\n                    error.msg = \"未登录\";\n                    break;\n\n                case 403:\n                    error.msg = \"拒绝访问\";\n                    break;\n\n                case 404:\n                    error.msg = `请求地址出错: ${error.response.config.url}`;\n                    break;\n\n                case 408:\n                    error.msg = \"请求超时\";\n                    break;\n\n                case 500:\n                    error.msg = \"服务器内部错误\";\n                    break;\n\n                case 501:\n                    error.msg = \"服务未实现\";\n                    break;\n\n                case 502:\n                    error.msg = \"网关错误\";\n                    break;\n\n                case 503:\n                    error.msg = \"服务不可用\";\n                    break;\n\n                case 504:\n                    error.msg = \"网关超时\";\n                    break;\n\n                case 505:\n                    error.msg = \"HTTP版本不受支持\";\n                    break;\n\n                default:\n            }\n        }\n        return Promise.reject(error); // 返回接口返回的错误信息\n    }\n)\n\n\n/**\n * 封装get方法\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function fetch(url:any,params={}) {\n  return new Promise((resolve,reject) => {\n    instance.get(url,{\n      params:params\n    })\n    .then((response:any) => {\n      resolve(JSON.parse(response));\n    })\n    .catch((err:any) => {\n      reject(err)\n    })\n  })\n}\n\n\n/**\n * 封装post请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\n export function post(url:any,data = {}) {\n   return new Promise((resolve,reject) => {\n    instance.post(url,data)\n          .then((response:any) => {\n            resolve(JSON.parse(response));\n          },(err:any) => {\n            reject(err)\n          })\n   })\n }\n\n /**\n * 封装patch请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function patch(url:any,data = {}){\n  return new Promise((resolve,reject) => {\n    instance.patch(url,data)\n         .then((response:any) => {\n           resolve(response.data);\n         },(err:any) => {\n           reject(err)\n         })\n  })\n}\n\n /**\n * 封装put请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function put(url:any,data = {}){\n  return new Promise((resolve,reject) => {\n    instance.put(url,data)\n         .then((response:any) => {\n           resolve(response.data);\n         },(err:any) => {\n           reject(err)\n         })\n  })\n}"],"sourceRoot":""}]}